<?php

namespace Repository;

use AbstractTestCase;
use App\Helper\Encrypt;
use App\Infrastructure\DatabaseConnector\DatabaseConnection;
use App\Infrastructure\DatabaseConnector\PdoConnector\NativePdoConnector;
use App\Infrastructure\PrivateKeyProvider\PrivateKeyProvider;
use App\Repository\Entity\User;
use App\Repository\Mapper\UserMapper;
use App\Repository\UserRepository;

class UserRepositoryTest extends AbstractTestCase
{
    protected DatabaseConnection $databaseConnection;

    public function setUp(): void
    {
        $this->databaseConnection = new DatabaseConnection(
            new NativePdoConnector(
                getenv('MYSQL_DATABASE'),
                getenv('MYSQL_HOST'),
                getenv('MYSQL_PORT'),
                getenv('MYSQL_USER'),
                getenv('MYSQL_PASSWORD')
            )
        );
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function skipCreateUser()
    {
        $dataRepository = new UserRepository($this->databaseConnection);
        $userMock = $this->getUserMock();
        $actual = $dataRepository->create($userMock);
        $this->assertIsArray($actual);
        $this->assertEquals(0, count($actual));
        $encryptedMail = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $userMock->getUserEmail());
        $dataRepository->removeRecordByEmail($encryptedMail);
    }

    public function testDeletedOnUser()
    {
        // First mock the data
        $dataRepository = new UserRepository($this->databaseConnection);
        $userMock = $this->getUserMock();
        $dataRepository->create($userMock);

        // Fetch the user
        $encryptedMail = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $userMock->getUserEmail());
        $user = $this->getUserByEmail($encryptedMail);

        // Soft delete the user
        $dataRepository->delete($user);

        // Fetch the user again (so we know that it comes from the DB)
        /** @var User $user */
        $user = $this->getUserByEmail($encryptedMail);

        // User should not exist at this point because deleted on.
        $this->assertEquals('', $user->getUserIdentifier());

        $dataRepository->removeRecordByEmail($encryptedMail);
    }

    public function testGetByUuid()
    {
        $dataRepository = new UserRepository($this->databaseConnection);
        $userMock = $this->getUserMock();
        $user = $dataRepository->create($userMock);
        $identifier = $user->getUserIdentifier();
        $actual = $dataRepository->getByUuid($user->getUserIdentifier());
        $this->assertEquals($identifier, $actual->getUserIdentifier());

        $encryptedMail = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $userMock->getUserEmail());
        $dataRepository->removeRecordByEmail($encryptedMail);
    }

    public function testGetUserByEmailAndPassword()
    {
        $dataRepository = new UserRepository($this->databaseConnection);
        $userMock = $this->getUserMock();
        $user = $dataRepository->create($userMock);
        $identifier = $user->getUserIdentifier();
        $encryptedMail = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $userMock->getUserEmail());
        $encryptedPassword = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $userMock->getUserPassword());

        $actual = $dataRepository->getByEncodedEmailAndPassword($encryptedMail, $encryptedPassword);
        $this->assertEquals($identifier, $actual->getUserIdentifier());

        $encryptedMail = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $userMock->getUserEmail());
        $dataRepository->removeRecordByEmail($encryptedMail);
    }

    public function testUpdateUser()
    {
        $expected = 'SomeOtherName';
        $dataRepository = new UserRepository($this->databaseConnection);
        $userMock = $this->getUserMock();
        $encryptedMail = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $userMock->getUserEmail());

        $user = $dataRepository->create($userMock);
        $encryptedName = Encrypt::encrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $expected);
        $dataRepository->update($user->getUserIdentifier(), $encryptedName, $user->getUserEmail(), $user->getUserPassword());

        $actual = $dataRepository->getByUuid($user->getUserIdentifier());
        $this->assertEquals($expected, Encrypt::decrypt(new PrivateKeyProvider(getenv('PRIVATE_KEY')), $actual->getUserName()));
        $dataRepository->removeRecordByEmail($encryptedMail);
    }

    public function testGetAll()
    {
        $dataRepository = new UserRepository($this->databaseConnection);
        $users = $dataRepository->getAll();
        $this->assertIsArray($users);
    }

    private function getUserMock()
    {
        $userMock = new User();
        $userMock->setUserEmail('something@gmail.com');
        $userMock->setUserName('john doe');
        $userMock->setUserPassword('mysecretpassword');
        return $userMock;
    }
    /**
     * @param string $email
     *
     * @return User
     */
    private function getUserByEmail(string $email): User
    {
        $dataRepository = new UserRepository($this->databaseConnection);
        return $dataRepository->getByEncodedEmail($email);
    }

}