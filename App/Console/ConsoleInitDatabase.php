<?php

namespace App\Console;

use App\Console\CommandLineDescription\DatabaseDescription;
use App\Console\CommandLineOption\DatabaseOption;
use App\Console\ConsoleInterface\ConsoleInterface;
use App\Infrastructure\DatabaseConnector\DatabaseConnection;
use App\Infrastructure\DatabaseConnector\PdoConnector\NativePdoConnector;
use App\Repository\UserRepository;

class ConsoleInitDatabase extends AbstractConsole implements ConsoleInterface
{
    public function __construct()
    {
        $commandLineOption = new DatabaseOption();
        $commandLineDescription = new DatabaseDescription();
        parent::__construct($commandLineOption, $commandLineDescription);
    }

    public function execute()
    {
        self::checkTableExists();
        parent::execute(); // TODO: Change the autogenerated stub
    }

    private static function checkTableExists()
    {
        $databaseConnection = new DatabaseConnection(
            new NativePdoConnector(
                getenv('MYSQL_DATABASE'),
                getenv('MYSQL_HOST'),
                getenv('MYSQL_PORT'),
                getenv('MYSQL_USER'),
                getenv('MYSQL_PASSWORD')
            )
        );

        $dataRepository = new UserRepository($databaseConnection);
        if (!$dataRepository->doesTableExist()) {
            $inputFile = __DIR__ . DIRECTORY_SEPARATOR . 'Input' . DIRECTORY_SEPARATOR . 'input.sql';
            if (file_exists($inputFile)) {
                $query = file_get_contents($inputFile);
                $dataRepository->getDatabaseConnection()->getDatabaseConnector()->getResultsFromRawQuery($query);
            }

            $console = new Console(['command', 'CreateUser', '']);
            $console = new Console(['command', 'faker', '']);
        }

        // Create new user
    }
}
